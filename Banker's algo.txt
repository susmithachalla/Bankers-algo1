//Banker's algorithm
#include<stdio.h>
#include<unistd.h> 
#include<stdlib.h>
#include<string.h>
static int P = 5;  
static int R = 3; 
int i,j,p,k;
void calculate1(int need[P][R],int maxm[P][R],int allot[P][R]) 
{
	for (i = 0 ; i < P ; i++)
    {
		for (j = 0 ; j < R ; j++) 
	    need[i][j] = maxm[i][j] - allot[i][j];
	}
}
enum bool {false, true}; //There is no bool type in c so we use enum instead of that..
bool isSafe(int processes[],int avail[],int maxm[][R],int allot[][R]) 
{
int need[P][R]; 
calculate1(need, maxm, allot); 
    bool finish[P] = {0}; 
  
    // To store safe sequence 
    int safeSeq[P]; 
    int work[R]; 
    for (i = 0; i < R ; i++) 
    	work[i] = avail[i]; 
    int count = 0; 
    while (count < P) 
    { 
        bool found = false; 
        for (p = 0; p < P; p++) 
        { 
           if (finish[p] == 0) 
            { 
                int j; 
                for (j = 0; j < R; j++) 
                    if (need[p][j] > work[j]) 
                        break; 
                if (j == R) 
                { 
                	for (k = 0 ; k < R ; k++) 
                    work[k] += allot[p][k]; 
  
                    safeSeq[count++] = p; 
  
                    finish[p] = 1; 
  
                    found = true; 
                } 
            } 
        }  
        if (found == false) 
        { 
            printf("System is not in safe state"); 
            return false; 
        } 
    } 
    printf("System is in safe state.\nSafe"
         " sequence is: "); 
    for (int i = 0; i < P ; i++) 
        printf(safeSeq[i]); 
  
    return true; 
} 
int main() 
{ 
    int processes[] = {0, 1, 2, 3, 4};  
    int avail[] = {3, 3, 2}; 
    int maxm[][R] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}}; 
    int allot[][R] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2}};  
    isSafe(processes, avail, maxm, allot); 
    return 0; 
}
